---
import Blog from "../../layouts/Blog.astro";
import MultiColumn from "../../components/MultiColumn.astro";
import Card from "../../components/Card.astro";
import Panel from "../../components/Panel.astro";
import Slider from "../../components/Slider.astro";
---

<Blog title="Matthew Carey | Telling A Story With Reports">
	<Fragment slot="title"> Telling A Story With Reports </Fragment>
	<article class="full grid-page">
		<MultiColumn columnCount="2" classList="section-style-1 card magenta">
			<h3>Avoiding the Unruly Wall of Data</h3>
			<p>
				Marketing campaigns with Google and Facebook come with a large
				footprint of data. There are many types of metrics that go into
				a performance report, such as spend, clicks, impressions, reach,
				and a whole suite of site and ad conversions. It is a
				challenging problem to solve both technically and visually. The
				asynchronous nature of waiting or data from two separate ad
				platforms requires dynamic updates as data streams in and
				managing how the page looks while retriving and displaying all
				that data. It is very easy for the report to turn into an
				endless amount of unrully tables.
			</p>
			<p>
				A recent refresh of our ad platform performance reports provided
				an opportunity to rethink how we can present more data that
				communicates a return on investiment for the retailers using our
				service.
			</p>
			<h4>Goals</h4>
			<ul>
				<li>Demonstrate the value of our service.</li>
				<li>Show our retailers the info they care about the most.</li>
				<li>
					New ways to present data that tell a specific story about
					their ad metrics.
				</li>
				<li>Build upon what has worked in the past.</li>
			</ul>

			<h4>Approach</h4>
			<p>
				When designing the report mock up I took some inspiration from
				the concept of the inverted pyramid often used in journalism.
				Present the most newsworthy info first, followed by important
				details, and the less important details that are nice to know
				for the people who are deeply invested.
			</p>
			<h4 class="break-before-column">Data Organization</h4>
			<p>
				The page itself was broken into several sections with report
				highlights being at the top and it would get progressivly more
				detailed. To avoid an overwelming amount of data being shown at
				once I created a custom tab component with dynamic named slots
				passsed in as prop array. This would allow sections to be
				created on the fly depending on when data was loaded. One thing
				many tab components in popular UI libraries cause the to content
				jump up and down between differnt tabs because the height of
				each tab varies based on conent. One way to get around this was
				to get the content height after it was loaded and maintain its
				value in an array. As a users switched be tabs and the index
				changed the <code>max-height</code>. CSS transitions would allow
				it smoothly animate between the two values and reduce the
				otherwise instant content jump.
			</p>
			<video controls>
				<source src="/videos/tabs.mp4" type="video/mp4" />
			</video>
		</MultiColumn>

		<Card boxShadowColor="magenta" tagname="section">
			<h3>Engaging Charts</h3>
			<p>
				As a user moved from tab to tab they are presented with an
				engaging chart as well as tables for detailed info. The charts
				are vital to quickly show and compare metrics to spend or
				pefomance by device. One of the newest charts I am most proud of
				is a bubble scatter chart that shows a specific metric like
				clicks, impressions, or purchase to the spend of all the
				campaign during the report time frame. It was a great way to
				show how the amount they spent for a campaing impacts its
				perfomances. Users can select a metric to compare to the
				campaing spend. The challenging part was handling ad platform
				data as it came in at different times and it was further
				complicated by Google and Facebook have some platform exclusive
				metrics. In a nutshell I used a Vue computed property to
				dynamically build mertics options based on the available
				platform metrics. I also used a computed property to dynamically
				format the data for the chart component based on the user's
				selected options. This required extensive knowledge of Vue's
				reactivity, JavaScript array methods: map, filter, reduce, from,
				as well as the object from entries method. In total there were
				three separate sources of data. Google key metrics, Google
				conversions, and Facebook metrics.
			</p>
			<p>
				The peformance report page is full of custom components like a
				gnatt chart that utilized CSS grid to show when campaigns
				started and ended in comparison to each other, and a drill down
				table with breadcrumb navigation that would swap between tables
				when a user clicked on a table row.
			</p>
			<!-- <Slider slides={videos} /> -->
			<Slider classList="video-slider" hasArrows>
				<Panel>
					<video controls>
						<source
							src="/videos/bubblechart.mp4"
							type="video/mp4"
						/>
					</video>
				</Panel>
				<Panel>
					<video controls>
						<source
							src="/videos/treemapchart.mp4"
							type="video/mp4"
						/>
					</video>
				</Panel>
				<Panel>
					<video controls>
						<source src="/videos/gnattchart.mp4" type="video/mp4" />
					</video>
				</Panel>
				<Panel>
					<video controls>
						<source
							src="/videos/drilldowntable.mp4"
							type="video/mp4"
						/>
					</video>
				</Panel>
			</Slider>
			<p>
				<small
					>Back-end Collaborators: Avery Gonzales, Andrew Towe,
					Preston McCumber
				</small>
			</p>
		</Card>
	</article>
</Blog>
<style is:global>
	@import "./../../styles/core.css";
	@import "./../../archipelago-elements/ARSlider.css" layer(main);

	@layer main {
		.video-slider:not(.init) {
			--dynamic-spacing: 2rem;

			ar-panel video {
				object-fit: cover;
				height: 100%;
			}
		}
	}
</style>
