---
import Blog from "../../layouts/Blog.astro";
import MultiColumn from "../../components/MultiColumn.astro";
import Card from "../../components/Card.astro";
import Panel from "../../components/Panel.astro";
import Slider from "../../components/Slider.astro";

const seoInfo = {
	title: "Matthew Carey | Telling A Story With Reports",
	description:
		"Designing & Developing UI to show analytics data without overwhelming the user gets complicated. Especially when you have to cater to different types of users.",
};
---

<Blog seoInfo={seoInfo}>
	<Fragment slot="title">Telling A Story With Reports </Fragment>
	<Fragment slot="published-date">December 20th, 2024</Fragment>
	<article class="full grid-page">
		<MultiColumn columnCount="2" classList="section-style-1 card magenta">
			<h3>Avoiding the Unruly Wall of Data</h3>
			<p>
				Marketing campaigns with Google and Facebook come with a large
				footprint of data. There are many types of metrics that go into
				a performance report, such as spend, clicks, impressions, reach,
				and a whole suite of site and ad conversions. It is a
				challenging problem to solve both technically and visually. The
				asynchronous nature of waiting for data from two separate ad
				platforms requires dynamic updates as data streams in. As well
				as managing how the page looks while retrieving and displaying
				all that data. It is very easy for the report to turn into an
				endless amount of unruly tables.
			</p>
			<p>
				A recent refresh of our ad platform performance reports provided
				an opportunity to rethink how we can present more data that
				communicates a return on investment for the retailers using our
				service.
			</p>
			<h4>Goals</h4>
			<ul>
				<li>Demonstrate the value of our service.</li>
				<li>Show our retailers the info they care about the most.</li>
				<li>
					New ways to present data that tells a specific story about
					their ad metrics.
				</li>
				<li>Build upon what has worked in the past.</li>
			</ul>

			<h4>Approach</h4>
			<p>
				When designing the report mock up, I took some inspiration from
				the concept of the inverted pyramid often used in journalism.
				Present the most newsworthy information first, followed by
				important details, and the less important details that are nice
				to know for the people who are deeply invested.
			</p>
			<h4 class="break-before-column">Data Organization</h4>
			<p>
				The page itself was broken into several sections with report
				highlights being at the top and it would get progressively more
				detailed. To avoid an overwhelming amount of data being shown at
				once, I created a custom tab component with dynamic named slots
				passed in as a prop array. This would allow sections to be
				created on the fly depending on when data was loaded. One thing
				many tab components in popular UI libraries cause the content to
				jump up and down between different tabs because the height of
				each tab varies based on content. One way to get around this was
				to get the content height after it was loaded and maintain its
				value in an array. As a user switched tabs and the index changed
				the <code>max-height</code>. CSS transitions would allow it
				smoothly animate between the two values and reduce the otherwise
				instant content jump.
			</p>
			<video controls>
				<source src="/videos/tabs.mp4" type="video/mp4" />
			</video>
		</MultiColumn>

		<Card boxShadowColor="magenta" tagname="section">
			<h3>Engaging Charts</h3>
			<p>
				As a user moves from tab to tab, they are presented with an
				engaging chart as well as tables for detailed info. The charts
				are vital to quickly show and compare metrics to spend or
				performance by device. One of the newest charts I am most proud
				of is a bubble scatter chart. This chart shows a specific metric
				like clicks, impressions, or purchase to the spend of all the
				campaigns during the report time frame. It was a great way to
				show how the amount they spent for a campaign impacts its
				performance as users can select a metric to compare to the
				campaign spend. The challenging part was handling ad platform
				data as it came in at different times and it was further
				complicated by Google and Facebook having some platform
				exclusive metrics. In a nutshell, I used a Vue computed property
				to dynamically build metric options based on the available
				platform metrics. Computed properties were also used to
				dynamically format the data for the chart component based on the
				user's selected options. This required extensive knowledge of
				Vue's reactivity, JavaScript array methods: map, filter, reduce,
				from, as well as the object from entries method. In total there
				were three separate sources of data: Google key metrics, Google
				conversions, and Facebook metrics.
			</p>
			<p>
				The performance report page is full of custom components like a
				gantt chart that utilized CSS grid to show when campaigns
				started and ended in comparison to each other, and a drill down
				table with breadcrumb navigation that would swap between tables
				when a user clicked on a table row.
			</p>
			<!-- <Slider slides={videos} /> -->
			<Slider classList="video-slider" hasArrows>
				<Panel>
					<video controls>
						<source
							src="/videos/bubblechart.mp4"
							type="video/mp4"
						/>
					</video>
				</Panel>
				<Panel>
					<video controls>
						<source
							src="/videos/treemapchart.mp4"
							type="video/mp4"
						/>
					</video>
				</Panel>
				<Panel>
					<video controls>
						<source src="/videos/gnattchart.mp4" type="video/mp4" />
					</video>
				</Panel>
				<Panel>
					<video controls>
						<source
							src="/videos/drilldowntable.mp4"
							type="video/mp4"
						/>
					</video>
				</Panel>
			</Slider>
			<p>
				<small
					>Back-end Collaborators: Avery Gonzales, Andrew Towe,
					Preston McCumber
				</small>
			</p>
		</Card>
	</article>
</Blog>
<style is:global>
	@import "./../../styles/core.css";
	@import "./../../archipelago-elements/ARSlider.css" layer(main);

	@layer main {
		.video-slider:not(.init) {
			--dynamic-spacing: 2rem;

			ar-panel video {
				object-fit: cover;
				height: 100%;
			}
		}
	}
</style>
